{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"svm","provenance":[],"authorship_tag":"ABX9TyOm1lG4QpyR+Z3YgkPMaqFw"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"ylWuUB6c2Lt8","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python3\n","# -*- coding: utf-8 -*-\n","\"\"\"\n","Created on Sat Apr 25 23:23:15 2020\n","\n","@author: sakib\n","\"\"\"\n","\n","import numpy as np\n","import matplotlib.pyplot as plt \n","import pandas as pd\n","from read_stanford_sentiment_treebank import read_data\n","import re\n","import nltk\n","from nltk.corpus import stopwords\n","from nltk.stem.porter import PorterStemmer\n","\n","dataset = read_data('/media/sakib/alpha/work/EmotionDetectionDir/NaiveBayes/stanfordSentimentTreebank')\n","dataset['sentiment_values'] = pd.to_numeric(dataset['sentiment_values'], downcast = 'float')\n","dataset['sentiment_values'] = (dataset['sentiment_values'] >= 0.4).astype(float)\n","\n","review_lines = list()\n","lines = dataset['Phrase'].values.tolist()\n","sentiment = dataset['sentiment_values']\n","\n","for line in lines:\n","    review = re.sub('[^a-zA-Z]', ' ', line)\n","    review = review.lower()\n","    review_lines.append(review)\n","\n","\n","df = pd.DataFrame(\n","    {'phrase': review_lines,\n","     'sentiment': sentiment\n","     })\n","\n","df['phrase'] = df['phrase'].str.lstrip()\n","\n","filter = df['phrase'] != \"\"\n","dfNew = df[filter]\n","\n","\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","cv = CountVectorizer(max_features = 1500)\n","X = cv.fit_transform(dfNew['phrase']).toarray()\n","y = dfNew.iloc[:, 1].values\n","\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n","\n","\n","from sklearn.naive_bayes import GaussianNB\n","classifier = GaussianNB()\n","classifier.fit(X_train, y_train)\n","\n","\n","y_pred = classifier.predict(X_test)\n","\n","# Making the Confusion Matrix\n","from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(y_test, y_pred)"],"execution_count":0,"outputs":[]}]}